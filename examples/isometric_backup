<head>
  <base href=".." />
</head>
<body>
<script src="source/Data.js"></script>
<script src="source/Map.js"></script>
<script src="source/Object.js"></script>
<script src="source/Time.js"></script>
<script src="source/Reference.js"></script>
<script src="source/Type.js"></script>
<script src="source/GL.js"></script>
<script src="data/Properties.js"></script>
<script src="data/Quests.js"></script>
<script src="data/Resources.js"></script>
<script src="data/Actions.js"></script>
<script src="data/Creatures.js"></script>
<script src="data/Items.js"></script>
<script src="lib/Seed.js"></script>
<script src="lib/gl-matrix/common.js"></script>
<script src="lib/gl-matrix/mat4.js"></script>
<script src="lib/gl-matrix/vec3.js"></script>

<style>

  body, html {
    padding: 0;
    margin: 0;
  }

  canvas {
    width: 100%;
    height: 100%;
  }
</style>

<canvas id="canvas"></canvas>

<script id="2d-vertex-shader" type="x-shader/x-vertex">
  attribute vec2 position; // -1..1
  attribute vec2 texture;  //  0..1

  uniform vec2 viewport;
  uniform vec2 scroll;
  uniform mat4 matrix;
  uniform mat4 camera;
  uniform mat4 projection;
  uniform mat4 orientation;

  varying vec2 pixel;
  varying vec2 tile;

  void main() {
    vec2 pos = position;
    pos.y = - pos.y - 0.5;
    pixel = ((pos + 1.0) / 2.0 * viewport) + scroll;
    pixel.y *= 2.0;
    tile = texture;
    
    gl_Position = vec4(position, 0, 1) * matrix * projection *camera;
  }
</script>

<script id="2d-fragment-shader" type="x-shader/x-fragment">
  precision mediump float;

  uniform sampler2D map;
  uniform sampler2D objects;
  uniform sampler2D atlas;

  uniform vec2 mapSize;
  uniform vec2 atlasSize;
  uniform float tileSize;
  uniform mat4 projection;
  uniform mat4 orientation;

  varying vec2 pixel;
  varying vec2 tile;

  vec2 locals(vec2 shifted) {

    vec2 cell = floor(shifted * mapSize);

    vec2 dot = pixel;// * mapSize * tileSize;

    vec2 start = vec2(
      (cell.x - cell.y) * (tileSize) 
        + (mapSize.x * tileSize ) - tileSize, 
      (cell.x + cell.y) * (tileSize / 2.0) 
    );

    return pixel - start;
  }

  vec4 color(sampler2D map, vec2 shift, vec2 translation) {
    vec2 shifted = tile + shift / mapSize;
    vec2 locals = locals(tile);
    vec4 location = texture2D(map, shifted);
    //return vec4(
    //  locals.y / (tileSize),
    //  locals.x / (tileSize * 2.0),// > 0.5 ? 1 : 0,
    //  0, 1);
    vec2 offset = floor(location.xy * 256.0);
    offset.x *= tileSize * 2.0;
    offset.y *= tileSize * 2.0;

    vec2 point = (locals + translation + offset);

    return texture2D(atlas, point / (atlasSize));
  }

  vec4 finalColor(sampler2D map, vec2 shift, vec2 translate) {
    vec2 coordinates = tile * mapSize - floor(tile * mapSize);
    vec4 down = color(map, vec2(1, 1) + shift, vec2(0.0, 0.0) + translate);
    if (down.a > 0.0) {
      return down;
    } else {
      if (coordinates.x >= coordinates.y) {
        vec4 left = color(map, vec2(1, 0) + shift, vec2(-32.0, 16.0) + translate);
        if (left.a > 0.0) {
          return left;
        }
      } else {
        vec4 right = color(map, vec2(0, 1) + shift, vec2(32.0, 16.0) + translate);  
        if (right.a > 0.0) {
          return right;
        }
      }
    }
    
    vec4 c = color(map, shift, vec2(0, 32.0));
    if (c.a == 0.0 && (coordinates.x < 1.0 / (tileSize) || coordinates.y < 1.0 / (tileSize))) {
      return color(map, shift, vec2(0, 33));
    } else {
      return c;
    }
  }

  void main() {
    vec4 result = finalColor(objects, vec2(1, 1), vec2(0.0, -32.0));
    if (result.a == 0.0)
      result = finalColor(objects, vec2(0, 0), vec2(0, 0));
    if (result.a == 0.0)
      result = finalColor(map, vec2(0, 0), vec2(0, 0));
    gl_FragColor =  result;
  }
</script>


<script>
  var seed = parseFloat(location.search.split('seed=')[1]) || Math.random();
  
  Math.seedrandom(seed)

  var canvas    = document.getElementById('canvas');

  var gl        = GL(canvas);
  var vertex    = GL.Script(gl, '2d-vertex-shader')
  var fragment  = GL.Script(gl, '2d-fragment-shader')
  var program   = GL.Program(gl, [vertex, fragment])

  // look up where the vertex data needs to go.
  var position  = GL.Program.Attribute(gl, program, 'position');
  var texture   = GL.Program.Attribute(gl, program, 'texture');

  var tileSize    = GL.Program.Uniform(gl, program, 'tileSize');
  var mapSize     = GL.Program.Uniform(gl, program, 'mapSize');
  var atlasSize   = GL.Program.Uniform(gl, program, 'atlasSize');
  var viewport    = GL.Program.Uniform(gl, program, 'viewport');
  var scroll      = GL.Program.Uniform(gl, program, 'scroll');
  var matrix      = GL.Program.Uniform(gl, program, 'matrix');
  var camera      = GL.Program.Uniform(gl, program, 'camera');
  var projection  = GL.Program.Uniform(gl, program, 'projection');
  var orientation = GL.Program.Uniform(gl, program, 'orientation');

  var map       = GL.Program.Uniform(gl, program, 'map');
  var objects   = GL.Program.Uniform(gl, program, 'objects');
  var atlas     = GL.Program.Uniform(gl, program, 'atlas');


  var geometry = [
    //x  y  u  v
      0,-0.5, 1, 1,
     -1, 0,   0, 1,
      1, 0,   1, 0,

     -1, 0,   0, 1,
      0, 0.5, 0, 0,
      1, 0,   1, 0,
  ];

  var getMap = function() {
    var canvas = document.createElement('canvas')
    var context = canvas.getContext('2d');
    var height = 27, width = 27;
    canvas.height = height;
    canvas.width = width;
    var data = context.createImageData(width, height);
    data.data[0] = 1;
    data.data[1] = 1;
    data.data[3] = 255;

    data.data[4] = 0;
    data.data[5] = 4;
    data.data[7] = 255;
    for (var i = 9; i < 9 * 9 * 9; i++) {
      data.data[i * 4 + 0] = Math.floor(Math.random() * 4);
      data.data[i * 4 + 1] = Math.floor(Math.random() * 3);
      data.data[i * 4 + 2] = 0;
      data.data[i * 4 + 3] = 255;
    }
    
    context.putImageData(data, 0, 0)
    document.body.appendChild(canvas)
    return canvas
  }

  var getObjects = function() {
    var canvas = document.createElement('canvas')
    var context = canvas.getContext('2d');
    var height = 27, width = 27;
    canvas.height = height;
    canvas.width = width;
    var data = context.createImageData(width, height);
    data.data[0] = 1;
    data.data[1] = 1;
    data.data[3] = 255;

    data.data[4] = 0;
    data.data[5] = 4;
    data.data[7] = 255;
    for (var i = 9; i < 9 * 9 * 9; i++) {
      data.data[i * 4 + 0] = Math.floor(Math.random() * 4);
      data.data[i * 4 + 1] = Math.floor(Math.random() * 10) + 4;
      data.data[i * 4 + 2] = 0;
      data.data[i * 4 + 3] = 255;
    }
    
    context.putImageData(data, 0, 0)
    document.body.appendChild(canvas)
    return canvas
  }
  //gl.enable(gl.CULL_FACE);
  //gl.enable(gl.DEPTH_TEST)
  var atlasImage, buffer;
  var mapImage = getMap();
  var objectsImage = getObjects()
  load("examples/tileset.png", function() {
    atlasImage = this;
    if (mapImage) {
      render();
      render();
    }
  })
  var scrollX = 0; scrollY = 0;
  var i = 0;
  var mapTexture, atlasTexture
  var speedX = 1, speedY = 1;
  var zoom = 2
  var size = 32;

  var depth = window.devicePixelRatio || 1;
  var view = true
  window.onresize = function() {
    view = true;
  }
  function render() {
    //if (i > 0)
    console.profile(i);
    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
    //console.profile(i);
    // provide texture coordinates for the map.
    if (!buffer) {
      buffer = GL.Buffer(gl, 'array', new Float32Array(geometry));

      // set meta data
      gl.uniform2f(atlasSize, atlasImage.width, atlasImage.height);
      gl.uniform2f(mapSize, mapImage.width, mapImage.height);
      gl.uniform1f(tileSize, size);

      // iterate geometry in pairs of two
      gl.enableVertexAttribArray(position);
      gl.vertexAttribPointer(position, 2, gl.FLOAT, false, 16, 0);

      gl.enableVertexAttribArray(texture);
      gl.vertexAttribPointer(texture, 2, gl.FLOAT, false, 16, 8);

      // upload & assign textures
      mapTexture = GL.Texture(gl, 0, mapImage, true)

      gl.uniform1i(map, 0);
      gl.uniform1i(atlas, 1);
      gl.uniform1i(objects, 2);

      atlasTexture = GL.Texture.call(atlasTexture, gl, 1, atlasImage, true);
      objectsTexture = GL.Texture(gl, 2, objectsImage, true);
      
    } else {
      gl.bindBuffer(gl.ARRAY_BUFFER, buffer)
    }
    if (view) {
      canvas.width = window.innerWidth * depth;
      canvas.height = window.innerHeight * depth;
      gl.uniformMatrix4fv(camera, false, getCamera());
      gl.uniformMatrix4fv(matrix, false, getMatrix());
      gl.uniformMatrix4fv(projection, false, getProjection());
      gl.uniformMatrix4fv(orientation, false, getOrientation());
      view = null;
    }
    // set resolution
    var h = gl.drawingBufferHeight;
    var w = gl.drawingBufferWidth
    var max = Math.max(mapImage.width, mapImage.height) * size;
    var total = Math.max(h, w)
    var ratio = w / h;
    gl.uniform2f(viewport, mapImage.width * size * 2, mapImage.height * size);
    gl.viewport(0, 0, w, h);

    gl.uniform2f(scroll, scrollX, scrollY);

    // Draw the thing.
    gl.drawArrays(gl.TRIANGLES, 0, 6);
    //console.profileEnd(i);

    // update scrolling position
    //scrollX = (scrollX + speedX)
    //scrollY = (scrollY + speedY)
    if (scrollX > mapImage.width * size || scrollX < 0)
      speedX = - speedX
    if (scrollY > mapImage.height * size || scrollY < 0)
      speedY = - speedY
    
    // schedule next frame
    if (i < 2)
      requestAnimationFrame(function() {
        render()
      });
    console.profileEnd(i);
    i++;
  }


  function load(src, callback) {
    var img = new Image;
    img.onload = callback;
    img.src = src;
    return img;
  }

  function getCamera() {
    var direction = mat4.create()
    var camera = mat4.create()
    
    // set up camera direction
    //mat4.lookAt(direction, [0, 0, 1], [0, 0, 0], [0, 1, 0])

    // create and apply perspective
    //mat4.perspective(camera, 90 * Math.PI / 180, window.innerWidth / window.innerHeight, 0.1, 1000)

    //mat4.ortho(camera, -1, 1, -1, 1, -1, 1)

    // handle canvas aspect ratio (makes everything squared)
    camera[0] = 1 / (window.innerWidth / window.innerHeight)

    //mat4.multiply(camera, camera, direction)
    //mat4.multiply(camera, camera, projection)


    return camera
  }

  function getOrientation() {

    var orientation = mat4.create()
    mat4.rotate(orientation, orientation, 90 * Math.PI / 180, [0, 0, 1]);

    mat4.rotate(orientation, orientation, 60 * Math.PI / 180, [1, 0 , 0]);
    mat4.rotate(orientation, orientation, 45 * Math.PI / 180, [0, 0, 1]);
    //mat4.scale(orientation, orientation, [1, 1, 1])

    return orientation;
  };

  function getProjection() {
    // rotate view (isometric projection)
    var projection = mat4.create()
    //mat4.rotate(projection, projection, 45 * Math.PI / 180, [0, 0//, 1]);
    //mat4.rotate(projection, projection, 60 * Math.PI / 180, [1, 0 //, 0]);
    return projection;
  }

  function getMatrix() {
    var matrix = mat4.create()

    // scale by ratio
    mat4.scale(matrix, matrix, [ (mapImage.width / mapImage.height), 1, 1])

    // scale map up, to make units equal device pixels
    var ratio = (mapImage.height * size / window.innerHeight) * zoom// * 1.4
    mat4.scale(matrix, matrix, [ ratio, ratio, ratio])
    return matrix
  }

</script>

